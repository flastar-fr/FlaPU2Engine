#include "common.hpp"

#include <cstdint>

uint8_t ALTERNATIVE_TEST_VALUE = 30;
uint8_t NULL_VALUE = 0;

uint8_t FIRST_REGISTER_TO_USE = 1;
uint8_t SECOND_REGISTER_TO_USE = 2;
uint8_t REGISTER_RESULT = 3;
uint8_t FIRST_REGISTER = 0;

std::vector<Token> VALID_OPERANDS_3_REGISTERS_CLASSIC = {Token(FIRST_REGISTER_TO_USE, ValueType::REGISTER),
    Token(SECOND_REGISTER_TO_USE, ValueType::REGISTER),
    Token(REGISTER_RESULT, ValueType::REGISTER)};
std::vector<Token> VALID_OPERANDS_3_REGISTERS_0_RESULT = {Token(FIRST_REGISTER_TO_USE, ValueType::REGISTER),
    Token(SECOND_REGISTER_TO_USE, ValueType::REGISTER),
    Token(FIRST_REGISTER, ValueType::REGISTER)};
std::vector<Token> VALID_OPERANDS_3_REGISTERS_0_OPERAND_RIGHT = {Token(FIRST_REGISTER_TO_USE, ValueType::REGISTER),
    Token(FIRST_REGISTER, ValueType::REGISTER),
    Token(REGISTER_RESULT, ValueType::REGISTER)};
std::vector<Token> VALID_OPERANDS_3_REGISTERS_0_OPERAND_LEFT = {Token(FIRST_REGISTER, ValueType::REGISTER),
    Token(SECOND_REGISTER_TO_USE, ValueType::REGISTER),
    Token(REGISTER_RESULT, ValueType::REGISTER)};

std::vector<Token> VALID_OPERANDS_2_REGISTERS_CLASSIC = {Token(FIRST_REGISTER_TO_USE, ValueType::REGISTER),
    Token(REGISTER_RESULT, ValueType::REGISTER)};
std::vector<Token> VALID_OPERANDS_2_REGISTERS_0_RESULT = {Token(FIRST_REGISTER_TO_USE, ValueType::REGISTER),
    Token(FIRST_REGISTER, ValueType::REGISTER)};
std::vector<Token> VALID_OPERANDS_2_REGISTERS_0_OPERAND = {Token(FIRST_REGISTER, ValueType::REGISTER),
    Token(REGISTER_RESULT, ValueType::REGISTER)};

std::vector<Token> VALID_OPERANDS_2_REGISTER_IMM_CLASSIC = {Token(FIRST_REGISTER_TO_USE, ValueType::REGISTER),
    Token(ALTERNATIVE_TEST_VALUE, ValueType::IMMEDIATE_VALUE)};
std::vector<Token> VALID_OPERANDS_2_REGISTER_IMM_0_REGISTER = {Token(FIRST_REGISTER, ValueType::REGISTER),
    Token(ALTERNATIVE_TEST_VALUE, ValueType::IMMEDIATE_VALUE)};
std::vector<Token> VALID_OPERANDS_2_REGISTER_IMM_0_OPERAND = {Token(FIRST_REGISTER, ValueType::REGISTER),
    Token(NULL_VALUE, ValueType::IMMEDIATE_VALUE)};

std::vector<Token> VALID_OPERANDS_2_REGISTER_VALUE_IMM_CLASSIC = {Token(FIRST_REGISTER_TO_USE, ValueType::REGISTER_VALUE),
    Token(ALTERNATIVE_TEST_VALUE, ValueType::IMMEDIATE_VALUE)};
std::vector<Token> VALID_OPERANDS_2_REGISTER_VALUE_IMM_0_REGISTER = {Token(FIRST_REGISTER, ValueType::REGISTER_VALUE),
    Token(ALTERNATIVE_TEST_VALUE, ValueType::IMMEDIATE_VALUE)};
std::vector<Token> VALID_OPERANDS_2_REGISTER_VALUE_IMM_0_OPERAND = {Token(FIRST_REGISTER, ValueType::REGISTER_VALUE),
    Token(NULL_VALUE, ValueType::IMMEDIATE_VALUE)};

std::vector<Token> VALID_OPERANDS_1_IMM_CLASSIC = {Token(ALTERNATIVE_TEST_VALUE, ValueType::IMMEDIATE_VALUE)};
std::vector<Token> VALID_OPERANDS_1_IMM_1_HIGHER_THAN_MAX_INSTRUCTIONS = {Token(MAX_AMOUNT_INSTRUCTIONS, ValueType::IMMEDIATE_VALUE)};
std::vector<Token> VALID_OPERANDS_1_IMM_2_HIGHER_THAN_MAX_INSTRUCTIONS = {Token(MAX_AMOUNT_INSTRUCTIONS + 1, ValueType::IMMEDIATE_VALUE)};